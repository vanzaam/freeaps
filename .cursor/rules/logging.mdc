---
description: Logging and notifications
globs: ["**/*.swift"]
alwaysApply: true
---

# Logging and Notifications

## Simplified Logging System
- **CURRENT**: Use `debug(category, message)` function for all logging
- Simple and unified logging approach
- Log files are written to Documents/logs/ directory:
  - Main log: Documents/logs/log.txt (via SimpleLogReporter)
  - Previous day: Documents/logs/log_prev.txt
  - Nightscout logs: Documents/logs/nightscout.txt
  - Notification logs: Documents/logs/notifications.txt

## Primary Logging Function
- Use `debug(.category, "message")` for all logging needs
- Examples:
  - `debug(.service, "IOBPredictor: Generated forecast with 72 points")`
  - `debug(.network, "Nightscout API request completed successfully")`
  - `debug(.performance, "Chart rendering took 45ms")`


## Log Categories (for debug function)
- `.service`: Service operations, business logic, IOB calculations
- `.network`: HTTP requests, responses, network errors  
- `.nightscout`: Nightscout upload operations
- `.database`: Database operations (GlucoseStorage, FetchGlucoseManager)
- `.bluetooth`: Bluetooth device connections and commands
- `.performance`: Performance metrics and timing
- `.deviceManager`: Pump and sensor management
- `.openAPS`: OpenAPS algorithm operations

## Logging Configuration
- Settings accessible via Settings → Extra Features → "Настройки логирования"
- Quick buttons: "Включить все логи", "Отключить все логи", "Включить все", "Выключить все"
- Can control console logging, file logging, and individual categories
- Log rotation and compression settings available

## Notification Management
- Write notifications ONLY to notifications.txt, not to log files
- Maintain maximum of 1000 entries in notifications.txt by removing older entries
- Event names should include timestamps (without seconds) in format: "EventName 2024-01-15 14:30"
- Use consistent timestamp format across all notifications

## Usage Guidelines
- **Always use `debug(.category, "message")`** instead of print() or os_log
- Choose appropriate category for each log message
- Include meaningful context in log messages
- Use consistent message formats for easier debugging

## File Management
- Keep notifications.txt size manageable (max 1000 entries)
- Implement automatic cleanup of old notification entries
- Use efficient file I/O operations for notification writing
- Handle file system errors gracefully
- Log files are automatically rotated daily

## Best Practices
- **Use `debug(.category, "message")`** for all logging - unified approach
- Include relevant context: service names, counts, values, timestamps
- Log important state changes and user actions  
- Provide clear, actionable log messages
- Choose appropriate categories (.service, .network, .performance, etc.)
- Examples of good logging:
  ```swift
  debug(.service, "IOBPredictor: Loaded \(activeDoses.count) active doses")
  debug(.network, "Nightscout upload completed: \(treatments.count) treatments")
  debug(.performance, "Chart rendering completed in \(duration)ms")
  ```