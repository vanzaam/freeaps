---
description: Ruby Automation Capabilities for OpenAPS - Complete Xcode Project Management
globs: ["**/*.rb", "**/*.xcodeproj/**", "**/*.xcworkspace/**"]
alwaysApply: true
---

# Ruby Automation Capabilities for OpenAPS

## üöÄ **CRITICAL: Ruby Can Do EVERYTHING Automatically**

**NEVER ask user to do manual Xcode operations when Ruby can automate them completely!**

## Complete Ruby Automation Capabilities

### 1. **Xcode Project File Management**
‚úÖ **Ruby can automatically:**
- Add/remove files to Xcode project
- Create groups and organize file structure
- Set file references and build phases
- Configure target memberships
- Modify project settings and build configurations
- Add/remove targets and schemes

```ruby
# Example: Add files automatically
require 'xcodeproj'
project = Xcodeproj::Project.open('FreeAPS.xcodeproj')
group = project.main_group.find_subpath('FreeAPS/Sources/Services', true)
file_ref = group.new_file('NewService.swift')
target = project.targets.find { |t| t.name == 'FreeAPS' }
target.add_file_references([file_ref])
project.save
```

### 2. **Swift Package Manager Dependencies**
‚úÖ **Ruby can automatically:**
- Resolve package dependencies via `xcodebuild -resolvePackageDependencies`
- Fix missing package products (SwiftCharts, Swinject, etc.)
- Clean derived data selectively
- Handle package conflicts and repository issues
- Update package URLs and versions

```ruby
# Example: Fix dependencies automatically
system("xcodebuild -resolvePackageDependencies")
system("rm -rf ~/Library/Developer/Xcode/DerivedData/FreeAPS*")
```

### 3. **Build Phases and Framework Embedding**
‚úÖ **Ruby can automatically:**
- Add frameworks to "Embed Frameworks" build phase
- Configure Code Signing settings
- Set up proper framework linking
- Fix dyld loading errors by embedding frameworks
- Modify build phase scripts and settings

```ruby
# Example: Add framework to Embed Frameworks
embed_phase = target.copy_files_build_phases.find { |phase| phase.name == 'Embed Frameworks' }
build_file = project.new(Xcodeproj::Project::Object::PBXBuildFile)
build_file.product_ref = swift_charts_ref
build_file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy'] }
embed_phase.files << build_file
```

### 4. **Workspace Management**
‚úÖ **Ruby can automatically:**
- Add/remove projects from workspace
- Modify workspace XML structure
- Configure project references
- Set up dependency relationships
- Handle workspace file corruption

```ruby
# Example: Add project to workspace
workspace_path = 'FreeAPS.xcworkspace/contents.xcworkspacedata'
content = File.read(workspace_path)
new_project = '   <FileRef location = "group:Dependencies/NewKit/NewKit.xcodeproj"></FileRef>'
updated_content = content.sub('</Workspace>', "#{new_project}\n</Workspace>")
File.write(workspace_path, updated_content)
```

### 5. **Build Configuration and Settings**
‚úÖ **Ruby can automatically:**
- Modify build settings (SWIFT_VERSION, deployment target, etc.)
- Configure code signing identities
- Set up custom build configurations
- Modify Info.plist settings
- Handle xcconfig file modifications

### 6. **Dependency Resolution and Cleanup**
‚úÖ **Ruby can automatically:**
- Clean specific derived data directories
- Resolve Swift Package Manager conflicts
- Fix repository URL conflicts (like SwiftCharts)
- Handle submodule issues
- Reset and rebuild project dependencies

### 7. **Error Detection and Fixing**
‚úÖ **Ruby can automatically:**
- Detect missing framework embeddings
- Fix dyld loading errors
- Resolve "Cannot find product" errors
- Handle circular dependency issues
- Fix broken project references

### 8. **Project Structure Maintenance**
‚úÖ **Ruby can automatically:**
- Reorganize file groups
- Maintain consistent project structure
- Update file paths and references
- Clean up unused references
- Validate project integrity

### 9. **Build and Compilation**
‚úÖ **Ruby can automatically:**
- Trigger builds via xcodebuild
- Clean build folders
- Resolve compilation errors
- Handle build script execution
- Manage build artifacts

### 10. **Advanced Project Operations**
‚úÖ **Ruby can automatically:**
- Clone and modify project templates
- Merge project files
- Extract and isolate components
- Create new targets from existing code
- Refactor project architecture

## Ruby Script Templates and Patterns

### Universal Fix Script Template
```ruby
#!/usr/bin/env ruby
require 'xcodeproj'

puts "üîß Fixing [ISSUE_NAME]..."

# 1. Clean environment
puts "üßπ Cleaning derived data..."
system("rm -rf ~/Library/Developer/Xcode/DerivedData/FreeAPS*")

# 2. Open project
project_path = 'FreeAPS.xcodeproj'
project = Xcodeproj::Project.open(project_path)

# 3. Find target
target = project.targets.find { |t| t.name == 'FreeAPS' }
raise "Target not found!" unless target

# 4. Make modifications
# [SPECIFIC OPERATIONS HERE]

# 5. Save project
project.save

# 6. Resolve dependencies
puts "üì¶ Resolving dependencies..."
system("xcodebuild -resolvePackageDependencies")

puts "‚úÖ Fix completed successfully!"
```

### File Addition Script Template
```ruby
#!/usr/bin/env ruby
require 'xcodeproj'

project = Xcodeproj::Project.open('FreeAPS.xcodeproj')
group = project.main_group.find_subpath('[GROUP_PATH]', true)
file_ref = group.new_file('[FILENAME]')
target = project.targets.find { |t| t.name == 'FreeAPS' }
target.add_file_references([file_ref])
project.save
puts "‚úÖ Successfully added [FILENAME] to project"
```

## When to Use Ruby Automation

### ‚úÖ **ALWAYS Use Ruby For:**
- Adding files to Xcode project
- Fixing Swift Package Manager dependencies
- Embedding frameworks in app bundle
- Resolving build configuration issues
- Cleaning derived data
- Modifying workspace structure
- Fixing dyld loading errors
- Resolving missing product errors
- Any Xcode project modifications

### ‚ùå **NEVER Ask User To:**
- Manually add files in Xcode interface
- Manually clean derived data through Finder
- Manually add frameworks to Embed Frameworks
- Manually resolve package dependencies
- Manually modify project.pbxproj files
- Manually fix workspace references

## Ruby Automation Workflow

### Standard Automation Process:
1. **Identify Issue**: Analyze the problem (missing dependencies, dyld errors, etc.)
2. **Create Ruby Script**: Write targeted automation script
3. **Execute Automatically**: Run script without user intervention
4. **Verify Results**: Check that issue is resolved
5. **Clean Up**: Remove temporary files, ensure project integrity

### Error Recovery Automation:
1. **Detect Error Pattern**: Identify common issues automatically
2. **Apply Known Solutions**: Use proven Ruby fixes
3. **Validate Fix**: Ensure problem is resolved
4. **Prevent Recurrence**: Add safeguards against future issues

## Advanced Ruby Capabilities

### Project Analysis and Diagnostics
```ruby
# Analyze project structure
def analyze_project(project)
  puts "üìä Project Analysis:"
  puts "  Targets: #{project.targets.map(&:name).join(', ')}"
  puts "  Build Configurations: #{project.build_configurations.map(&:name).join(', ')}"
  puts "  Dependencies: #{project.root_object.package_references.count} packages"
end
```

### Automated Testing Integration
```ruby
# Run tests automatically after fixes
def run_tests
  puts "üß™ Running automated tests..."
  result = system("xcodebuild test -workspace FreeAPS.xcworkspace -scheme 'OpenAPS' -destination 'platform=iOS Simulator,name=iPhone 16'")
  puts result ? "‚úÖ Tests passed" : "‚ùå Tests failed"
end
```

### Intelligent Problem Detection
```ruby
# Detect common issues automatically
def detect_issues(project)
  issues = []
  
  # Check for missing embeddings
  embed_phases = project.targets.flat_map(&:copy_files_build_phases)
  issues << "Missing Embed Frameworks phase" if embed_phases.empty?
  
  # Check for package dependencies
  if project.root_object.package_references.empty?
    issues << "No package dependencies found"
  end
  
  issues
end
```

## Best Practices for Ruby Automation

### 1. **Always Automate First**
- Create Ruby script before asking user to do anything manually
- Use proven templates and patterns
- Test automation thoroughly

### 2. **Comprehensive Error Handling**
- Check for common failure points
- Provide clear error messages
- Include recovery mechanisms

### 3. **User Communication**
- Show progress with clear messages
- Explain what automation is doing
- Provide next steps after completion

### 4. **Validation and Testing**
- Verify changes are correct
- Test that problems are resolved
- Ensure project still builds

## Ruby Automation Success Examples

### Recent Successes:
- ‚úÖ **SwiftCharts Embedding Fix**: Automatically added SwiftCharts to Embed Frameworks
- ‚úÖ **Dependency Resolution**: Fixed missing package products automatically
- ‚úÖ **Repository Conflicts**: Resolved SwiftCharts URL conflicts
- ‚úÖ **File Addition**: Added multiple files to project structure
- ‚úÖ **Workspace Management**: Added project references automatically

## Integration with OpenAPS Development

### Performance Focus:
- Automate performance-critical fixes
- Eliminate manual steps that slow development
- Focus on eliminating iAPS performance issues

### Development Workflow:
1. **Issue Identified** ‚Üí Ruby script created automatically
2. **Script Executed** ‚Üí Problem resolved without user intervention  
3. **Results Verified** ‚Üí Ensure fix is successful
4. **Continue Development** ‚Üí User can focus on coding, not project management

---

**Ruby can automate 95% of Xcode project management tasks. Always use Ruby automation instead of asking users to perform manual operations!** üöÄ

*Last updated: 2025-09-18*
*Focus: Complete automation of OpenAPS project management*