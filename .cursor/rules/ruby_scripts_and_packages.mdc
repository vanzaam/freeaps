---
description: Ruby Scripts and Swift Package Manager Rules
globs: ["**/*.rb", "**/Package.swift", "**/Gemfile", "**/fix_package_dependencies.sh"]
alwaysApply: true
---

# Ruby Scripts and Swift Package Manager Rules

## ‚úÖ SUCCESS: Ruby Scripts Work Perfectly!
**IMPORTANT:** Ruby scripts successfully add files to Xcode projects without breaking anything when used correctly!

**Recent Success:** Successfully added `EnhancedCrashAnalyzer.swift` and `EnhancedCrashAnalysisView.swift` to the project using `add_enhanced_crash_analyzer.rb` without any issues.

## Workflow for Adding Files
1. **Create Ruby script** following the pattern in `add_enhanced_crash_analyzer.rb`
2. **Run the script:** `ruby your_script.rb`
3. **Fix dependencies:** `./fix_package_dependencies.sh`
4. **Build in Xcode** - everything works perfectly!

## Problem with Ruby Scripts (Rare Cases)
In rare cases after using Ruby scripts to add files to Xcode project, Swift Package Manager dependencies might break with errors like:
- Missing package product 'SwiftCharts'
- Missing package product 'Swinject' 
- Missing package product 'SwiftDate'
- Missing package product 'SlideButton'
- Missing package product 'SwiftMessages'
- Missing package product 'Algorithms'
- Missing package product 'CryptoSwift'

## Automatic Solution
Always run the fix script after using Ruby scripts:

```bash
./fix_package_dependencies.sh
```

This script:
1. Resolves Swift Package Manager dependencies
2. Cleans FreeAPS derived data
3. Prepares project for clean build

## Manual Solution
If automatic script doesn't work:

```bash
# 1. Resolve package dependencies
xcodebuild -resolvePackageDependencies

# 2. Clean derived data
rm -rf ~/Library/Developer/Xcode/DerivedData/FreeAPS*

# 3. In Xcode: Product -> Clean Build Folder (Cmd+Shift+K)
```

## Prevention
- Use `ruby_script_template.rb` for new Ruby scripts - it automatically fixes dependencies
- Always run `./fix_package_dependencies.sh` after any Ruby script that modifies Xcode project
- Never modify Xcode project files directly without using proper Ruby scripts

## File Management Rules
- ‚úÖ **Use Ruby scripts for adding files to Xcode project** - they work perfectly!
- ‚úÖ **Always use existing Ruby scripts** in project root for file management
- ‚úÖ **Follow established patterns** in add_*.rb scripts (like `add_enhanced_crash_analyzer.rb`)
- ‚úÖ **Never use Python scripts** for Xcode project modifications
- ‚úÖ **Ruby scripts are safe and reliable** when following the proper workflow

## When to Use Fix Script
Run `./fix_package_dependencies.sh` after:
- Adding new files via Ruby scripts
- Modifying Xcode project structure
- Getting "Missing package product" errors
- Any Swift Package Manager related build failures

## Emergency Recovery
If all else fails:
1. Close Xcode completely
2. Run `./fix_package_dependencies.sh`
3. Reopen Xcode
4. Clean Build Folder (Cmd+Shift+K)
5. Rebuild project

## Best Practices
- ‚úÖ **Ruby scripts are the preferred method** for adding files to Xcode projects
- ‚úÖ **Always backup project** before major changes
- ‚úÖ **Test builds after any project file changes**
- ‚úÖ **Use version control** for all project modifications
- ‚úÖ **Document any additional setup** required for new files
- ‚úÖ **Follow the proven workflow:** Ruby script ‚Üí fix dependencies ‚Üí build

## Success Examples
- ‚úÖ `add_enhanced_crash_analyzer.rb` - successfully added crash analysis system
- ‚úÖ `add_telegram_auth_files.rb` - successfully added authentication files
- ‚úÖ `add_simple_command_system.rb` - successfully added command system

**Conclusion:** Ruby scripts are reliable, safe, and the recommended way to manage Xcode project files!

–ø—Ä–∏–º–µ—Ä —É—Å–ø–µ—Ö–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ª–æ–º–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ xcode –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–∏–∫—Å–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - 

#!/usr/bin/env ruby

require 'xcodeproj'

# –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_path = 'FreeAPS.xcodeproj'
project = Xcodeproj::Project.open(project_path)

# –ì—Ä—É–ø–ø—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
logger_group = project.main_group.find_subpath('FreeAPS/Sources/Logger', true)
views_group = project.main_group.find_subpath('FreeAPS/Sources/Views', true)

# –î–æ–±–∞–≤–ª—è–µ–º EnhancedCrashAnalyzer.swift
crash_analyzer_file = logger_group.new_file('EnhancedCrashAnalyzer.swift')
crash_analyzer_target = project.targets.find { |target| target.name == 'FreeAPS' }
crash_analyzer_target.add_file_references([crash_analyzer_file])

# –î–æ–±–∞–≤–ª—è–µ–º EnhancedCrashAnalysisView.swift
crash_analysis_view_file = views_group.new_file('EnhancedCrashAnalysisView.swift')
crash_analysis_view_target = project.targets.find { |target| target.name == 'FreeAPS' }
crash_analysis_view_target.add_file_references([crash_analysis_view_file])

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç
project.save

puts "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã EnhancedCrashAnalyzer.swift –∏ EnhancedCrashAnalysisView.swift –≤ –ø—Ä–æ–µ–∫—Ç"
puts "üìù –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å ./fix_package_dependencies.sh –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ"
