---
description: Error handling patterns
globs: ["**/*.swift"]
alwaysApply: true
---

# Error Handling Patterns

## Optional Handling
- Use guard let statements for safe optional unwrapping
- Never use force unwrapping (!) - always check for nil
- Provide meaningful fallback behavior for nil values
- Use optional chaining where appropriate

## Error Management
- Provide meaningful error messages to users
- Handle dependency resolution failures gracefully
- Implement proper error handling for all network operations
- Use Result types for operations that can fail

## Dependency Injection Errors
- Check for nil dependencies with guard let statements
- Provide fallback behavior when dependencies are unavailable
- Log dependency resolution failures for debugging
- Handle Swinject container errors appropriately

## Network Error Handling
- Handle network connectivity issues gracefully
- Implement proper timeout handling
- Provide user-friendly error messages for network failures
- Use retry logic for transient network errors

## Data Validation
- Validate input data before processing
- Handle malformed or missing data gracefully
- Provide clear error messages for validation failures
- Use appropriate data types and validation rules

## Best Practices
- Use do-catch blocks for throwing functions
- Provide context in error messages
- Log errors for debugging purposes
- Handle errors at the appropriate level
- Use custom error types for better error handling
- Implement proper error recovery strategies