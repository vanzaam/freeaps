---
description: OpenAPS project management
globs: ["**/*.rb", "**/*.py", "**/*.xcodeproj/**"]
alwaysApply: true
---

# OpenAPS Project Management

## File Addition Scripts
- ALWAYS use Ruby scripts for adding files to Xcode project, NOT Python
- Use existing Ruby scripts in the project root for file management
- Follow the established patterns in add_*.rb scripts
- Never use Python scripts for Xcode project modifications

## Derived Data Management
- Clean FreeAPS derived data only: `rm -rf ~/Library/Developer/Xcode/DerivedData/FreeAPS*`
- Do not delete all DerivedData - only FreeAPS-specific data
- Clean derived data when experiencing build issues
- Use this command before major builds or when switching branches

## File Integration
- Notify user when new source files are added so they can manually integrate them
- Provide clear instructions for manual integration steps
- Document any additional setup required for new files
- Ensure new files follow project structure conventions

## Build Process
- Compile after each code modification until successful compilation
- Use proper build destinations for iOS Simulator
- Test builds on real devices when possible
- Monitor build logs for warnings and errors

## Project Structure
- Maintain consistent file organization
- Follow established naming conventions
- Keep related files grouped together
- Document any structural changes

## Best Practices
- Always backup project before major changes
- Use version control for all project modifications
- Test builds after any project file changes
- Follow Xcode project file best practices
- Keep project file clean and organized

## Swift Package Manager Issues

- See `ruby_scripts_and_packages.mdc` for detailed Swift Package Manager troubleshooting
- Common errors: Missing package product 'SwiftCharts', 'Swinject', 'SwiftDate', etc.
- Use `xcodebuild -resolvePackageDependencies` to fix package resolution issues