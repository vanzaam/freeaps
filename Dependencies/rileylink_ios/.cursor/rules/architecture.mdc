---
description: FreeAPS architecture and patterns
globs: ["**/*.swift"]
alwaysApply: true
---

# FreeAPS Architecture and Patterns

## Core Architecture
- Use MVVM architecture with Combine framework
- Use @Injected() property wrapper for dependency injection with Swinject
- Handle optional dependencies safely with guard let checks
- Avoid implicitly unwrapped optionals (!) - use optional types (?) instead
- Use weak self in closures to prevent retain cycles
- Use os_log for detailed diagnostics and tracing execution flow

## Dependency Injection
- Always use @Injected() for service dependencies
- Check for nil dependencies with guard let statements
- Provide fallback behavior when dependencies are unavailable
- Use Swinject container for dependency resolution

## Memory Management
- Use weak self in all closures and completion handlers
- Avoid retain cycles in Combine publishers
- Properly dispose of subscriptions in deinit
- Use [weak self] capture lists in async operations

## Code Patterns
- Prefer Combine publishers over completion handlers
- Use @Published properties for UI state management
- Implement proper error handling with Result types
- Use guard statements for early returns
- Follow Swift naming conventions and style guidelines